import logging
import os
import json
import requests
from RDS import Util, ROParser
from flask import jsonify, request, g, abort
from io import BytesIO, BufferedReader

logger = logging.getLogger()


def index(project_id):
    abort(500)


def get(project_id, file_id):
    abort(500)


def post(project_id):
    # TODO: If jwt will be generated by Sciebo RDS through certificates, then you need passive mode for FileTransferMode in server.py and can create here everything you need, because only this endpoint will be called.
    # Otherwise you need all endpoints, but this would be the ideomatic way to implement for sciebo RDS for jwt workflow.
    # Look at port-datasafe (https://github.com/Sciebo-RDS/port_datasafe/blob/24043d71bfd79a0dd3ca5ade32597b4e1fe45bf1/src/api/project/files.py#L22) for example for jwt workflow.

    # Use "from RDS import ROParser" for parsing the metadata in request.json.get("metadata") and easier access for fields
    # an example ro-crate file can be found in root folder example-rocrate.json
    # parse the metadata to your needs, example here (https://github.com/Sciebo-RDS/Sciebo-RDS/blob/e0da1be88aa8010f2560d65258e916c150151bf2/RDS/circle1_adapters_and_ports/port_zenodo/src/api/project/project.py#L59)

    abort(500)


def patch(project_id, file_id):
    abort(500)


def delete(project_id, file_id=None):
    abort(500)
